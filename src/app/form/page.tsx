"use client";
import "@/app/global.css";
import { useUserByAt } from "@/hooks/useUserByAt";
import { useOrders } from "@/hooks/useOrders";
import {OrderStatus} from "@/types/api";
import Header from "@/app/form/components/Header";
import StatusPills from "@/app/form/components/StatusPills";
import OrderForm from "@/app/form/components/OrderForm/OrderForm";
import Sidebar from "@/app/form/components/Sidebar";
import {DndContext, DragEndEvent, DragStartEvent, DragOverlay} from "@dnd-kit/core";
import {useState} from "react";
import {DropArea, ServiceItem} from "@/app/form/components/DropArea";

export default function Home() {
    const at = "devapi1"
    const user = useUserByAt("devapi1");
    useOrders({ username: "devapi1" });

    const [selected, setSelected] = useState<ServiceItem[]>([]);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const [activeService, setActiveService] = useState<ServiceItem | null>(null);
    // ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    const [activeId, setActiveId] = useState<string | null>(null);
    const [leadId, setLeadId] = useState<string | null>(null);

    if (!user) return null;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    function handleDragStart(event: DragStartEvent) {
        const service = event.active.data.current?.service as ServiceItem;

        setActiveService(service); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
        setActiveId(event.active.id as string); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    function handleDragEnd(event: DragEndEvent) {
        const { active, over } = event;
        console.log('üèÅ Drag ended:', { overId: over?.id });

        setActiveService(null);
        setActiveId(null);

        if (!over) return;

        const service = active.data.current?.service as ServiceItem;
        if (!service) return;

        if (over.id === "drop-area") {
            handleDrop(service);
        } else if (typeof over.id === 'string' && over.id.startsWith('sub-drop-')) {
            const mainItemId = parseFloat(over.id.replace('sub-drop-', ''));
            console.log('üéØ Extracted mainItemId:', mainItemId);
            handleDrop(service, mainItemId);
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ drop
    const handleDrop = (service: ServiceItem, targetMainItemId?: number) => {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–æ–Ω–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ main –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ—Ç–∫–ª–æ–Ω—è–µ–º
        if (!targetMainItemId && service.category !== 'main') {
            return;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∑–æ–Ω–∞ main —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç main –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ—Ç–∫–ª–æ–Ω—è–µ–º
        if (targetMainItemId && service.category === 'main') {
            return;
        }

        addOrUpdateService(service, targetMainItemId);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    const addOrUpdateService = (service: ServiceItem, parentMainItemId?: number) => {


        // –õ–æ–≥–∏–∫–∞ –¥–ª—è main —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (service.category === 'main' && !parentMainItemId) {
            const newItem: ServiceItem = {
                ...service,
                orderId: Date.now() + Math.random(),
                quantity: 1,
                subItems: []
            };
            setSelected(prev => [...prev, newItem]);
            return;
        }


        // –õ–æ–≥–∏–∫–∞ –¥–ª—è additional/materials —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (parentMainItemId && (service.category === 'additional' || service.category === 'materials')) {
            console.log('üîß Adding to subItems of main:', parentMainItemId);

            // –ò—â–µ–º main —ç–ª–µ–º–µ–Ω—Ç
            const mainItem = selected.find(item => item.orderId === parentMainItemId);
            if (!mainItem) {
                console.error('‚ùå Main item not found:', parentMainItemId);

                return;
            }
            // if (!mainItem) {
            //     console.error('‚ùå Main item not found:', parentMainItemId);
            //
            //     if (selected.length === 0) {
            //         console.log('üì¶ Creating default "NO TV" main item');
            //         // –°–æ–∑–¥–∞–µ–º default main —ç–ª–µ–º–µ–Ω—Ç
            //         const defaultMainItem: ServiceItem = {
            //             id: "noTV",
            //             name: "NO TV",
            //             price: 0,
            //             category: "main",
            //             orderId: Math.floor(Date.now() + Math.random() * 1000),
            //             quantity: 1,
            //             subItems: []
            //         };
            //
            //         setSelected([defaultMainItem]);
            //
            //         // –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π additional —ç–ª–µ–º–µ–Ω—Ç –∫ –Ω–æ–≤–æ–º—É main
            //         setTimeout(() => {
            //             addOrUpdateService(service, defaultMainItem.orderId);
            //         }, 0);
            //     }
            //     return;
            // }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π sub-—ç–ª–µ–º–µ–Ω—Ç
            const existingSubItem = mainItem.subItems?.find(subItem => subItem.name === service.name);

            if (existingSubItem) {
                console.log('‚ûï Increasing quantity of existing sub-item');
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                setSelected(prev => prev.map(item =>
                    item.orderId === parentMainItemId && item.subItems
                        ? {
                            ...item,
                            subItems: item.subItems.map(subItem =>
                                subItem.orderId === existingSubItem.orderId
                                    ? { ...subItem, quantity: (subItem.quantity || 1) + 1 }
                                    : subItem
                            )
                        }
                        : item
                ));
            } else {
                console.log('‚ú® Creating new sub-item');
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π sub-—ç–ª–µ–º–µ–Ω—Ç
                const newItem: ServiceItem = {
                    ...service,
                    orderId: Date.now() + Math.random(),
                    quantity: 1,
                    parentMainItemId: parentMainItemId
                };

                setSelected(prev => prev.map(item =>
                    item.orderId === parentMainItemId && item.subItems
                        ? { ...item, subItems: [...item.subItems, newItem] }
                        : item
                ));
            }
            return;
        }

        console.log('‚ùì Unexpected case:', { category: service.category, parentMainItemId });
    };

    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleRemove = (id: string) => {
        const numericId = parseInt(id);

        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ main —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const mainItem = selected.find(item => item.orderId?.toString() === id || item.id === id);
        if (mainItem) {
            setSelected(prev => prev.filter(item =>
                item.orderId?.toString() !== id && item.id !== id
            ));
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–∏ main, –∏—â–µ–º —Å—Ä–µ–¥–∏ subItems
        setSelected(prev => prev.map(item =>
            item.subItems ? {
                ...item,
                subItems: item.subItems.filter(subItem =>
                    subItem.orderId?.toString() !== id && subItem.id !== id
                )
            } : item
        ));
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ main —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleUpdateQuantity = (orderId: number, newQuantity: number) => {
        if (newQuantity <= 0) {
            handleRemove(orderId.toString());
            return;
        }

        setSelected(prev => prev.map(item =>
            item.orderId === orderId
                ? { ...item, quantity: newQuantity }
                : item
        ));
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã main —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleUpdatePrice = (orderId: number, newPrice: number) => {
        setSelected(prev => prev.map(item =>
            item.orderId === orderId
                ? { ...item, price: newPrice }
                : item
        ));
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–∞
    const handleUpdateSubItemQuantity = (mainItemId: number, subItemId: number, newQuantity: number) => {
        if (newQuantity <= 0) {
            handleRemoveSubItem(mainItemId, subItemId);
            return;
        }

        setSelected(prev => prev.map(item =>
            item.orderId === mainItemId && item.subItems
                ? {
                    ...item,
                    subItems: item.subItems.map(subItem =>
                        subItem.orderId === subItemId
                            ? { ...subItem, quantity: newQuantity }
                            : subItem
                    )
                }
                : item
        ));
    };

    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–∞
    const handleRemoveSubItem = (mainItemId: number, subItemId: number) => {
        setSelected(prev => prev.map(item =>
            item.orderId === mainItemId && item.subItems
                ? {
                    ...item,
                    subItems: item.subItems.filter(subItem => subItem.orderId !== subItemId)
                }
                : item
        ));
    };
    const handleUpdateDiagonals = (orderId: number, diagonals: string[]) => {
        setSelected(prev => prev.map(item =>
            item.orderId === orderId
                ? { ...item, diagonals: diagonals }
                : item
        ));
    };

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è NO TV
    const handleUpdateCustomPrice = (orderId: number, customPrice: number) => {
        setSelected(prev => prev.map(item =>
            item.orderId === orderId
                ? { ...item, customPrice: customPrice }
                : item
        ));
    };
    return (
        <DndContext
            onDragStart={handleDragStart}
            onDragEnd={handleDragEnd}
        >
            <div className="h-screen flex bg-gray-50 overflow-hidden">
                <Sidebar />

                <div className="flex-1 flex flex-col">
                    <Header />
                    <StatusPills />

                    <div className="flex-1 flex overflow-hidden">
                        {/* Left side - Form - —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω—É—Ç—Ä–∏ */}
                        <div className="w-1/2 p-6 overflow-y-auto">
                            <OrderForm user={user} />
                        </div>

                        {/* Right side - Drop Area - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–∞—Ç–∏—á–Ω–∞ */}
                        <div className="w-1/2 p-6 flex flex-col">
                            <div className="flex-1 min-h-0">
                                <DropArea
                                    items={selected}
                                    onRemove={handleRemove}
                                    onUpdateQuantity={handleUpdateQuantity}
                                    onUpdatePrice={handleUpdatePrice}
                                    onUpdateSubItemQuantity={handleUpdateSubItemQuantity}
                                    onRemoveSubItem={handleRemoveSubItem}
                                    onUpdateDiagonals={handleUpdateDiagonals}           // ‚Üê –ù–æ–≤—ã–π –ø—Ä–æ–ø—Å
                                    onUpdateCustomPrice={handleUpdateCustomPrice}       // ‚Üê –ù–æ–≤—ã–π –ø—Ä–æ–ø—Å
                                    draggedItem={activeService}
                                    onDrop={handleDrop}
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* DragOverlay - –ø–ª–∞–≤–∞—é—â–∏–π —Å–ª–æ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º z-index */}
            <DragOverlay style={{ zIndex: 9999 }}>
                {activeService ? (
                    <div className={`
                        text-white rounded-lg shadow-2xl px-3 py-2 min-h-[58px] 
                        flex flex-col justify-center items-center text-xs font-medium 
                        transform rotate-2 scale-110 border-2
                        ${activeService.category === 'main' ? 'bg-red-800 border-red-600' :
                        activeService.category === 'additional' ? 'bg-orange-800 border-orange-600' :
                            'bg-yellow-800 border-yellow-600'
                    }
                    `}>
                        <span className="leading-tight font-semibold">{activeService.name}</span>
                        <span className="text-[11px] mt-1 opacity-75">${activeService.price}</span>
                        <span className={`text-[10px] mt-1 px-2 py-0.5 rounded-full ${
                            activeService.category === 'main' ? 'bg-red-600' :
                                activeService.category === 'additional' ? 'bg-orange-600' :
                                    'bg-yellow-600'
                        }`}>
                            {activeService.category}
                        </span>

                        {/* –≠—Ñ—Ñ–µ–∫—Ç "–ø–æ–¥—ä–µ–º–∞" */}
                        <div className="absolute -inset-1 bg-blue-400 rounded-lg opacity-30 animate-pulse"></div>
                    </div>
                ) : null}
            </DragOverlay>
        </DndContext>
    );
}