// CustomerInfo.tsx - –í–ï–†–°–ò–Ø –° –ü–†–û–í–ï–†–ö–û–ô –î–£–ë–õ–ï–ô
import { useOrderStore } from '@/stores/orderStore';
import { useState, useEffect, useRef } from 'react';
import Order from '@/types/formDataType';
import {useRouter} from "next/navigation";

export default function CustomerInfo() {
    // üè™ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ store
    const {
        formData,
        updateFormData,
        isWorkingOnTelegramOrder,
        currentTelegramOrder,
        checkDoubleOrders,
        getByLeadID// –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π
    } = useOrderStore();
    const router = useRouter();
    // üîç –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π
    const [duplicateOrders, setDuplicateOrders] = useState<Order[]>([]);
    const [showDuplicates, setShowDuplicates] = useState(false);
    const [isCheckingDuplicates, setIsCheckingDuplicates] = useState(false);
    const [checkTimeout, setCheckTimeout] = useState<NodeJS.Timeout | null>(null);

    // Ref –¥–ª—è –∫–ª–∏–∫–∞ –≤–Ω–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    const duplicatesRef = useRef<HTMLDivElement>(null);

    // üîç –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π —Å debounce
    const handlePhoneCheck = async (phoneNumber: string) => {
        if (!phoneNumber.trim() || phoneNumber.length < 8) {
            setDuplicateOrders([]);
            setShowDuplicates(false);
            return;
        }

        setIsCheckingDuplicates(true);

        try {
            const duplicates = await checkDoubleOrders(phoneNumber.trim());

            if (duplicates && duplicates.length > 0) {
                setDuplicateOrders(duplicates);
                setShowDuplicates(true);
                console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º ${phoneNumber}`);
            } else {
                setDuplicateOrders([]);
                setShowDuplicates(false);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–µ–π:', error);
            setDuplicateOrders([]);
            setShowDuplicates(false);
        } finally {
            setIsCheckingDuplicates(false);
        }
    };

    // üìû –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å debounce
    const handlePhoneChange = (value: string) => {
        updateFormData('phoneNumber', value);

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (checkTimeout) {
            clearTimeout(checkTimeout);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        const newTimeout = setTimeout(() => {
            handlePhoneCheck(value);
        }, 1000);

        setCheckTimeout(newTimeout);
    };
    const updateOrder = useOrderStore(state => state.getByLeadID);

    // üéØ –í—ã–±–æ—Ä –¥—É–±–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
    const handleSelectDuplicate = async (leadId: string) => {
        console.log(leadId)
        const order = await updateOrder(leadId);

        if (order) {
            console.log("–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:", order);
            router.push("/changeOrder")
            // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ state, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ —Ñ–æ—Ä–º–µ –∏ —Ç.–ø.
        } else {
            console.warn("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }

    // üö´ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (duplicatesRef.current && !duplicatesRef.current.contains(event.target as Node)) {
                setShowDuplicates(false);
            }
        };

        if (showDuplicates) {
            document.addEventListener('mousedown', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showDuplicates]);

    // üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            if (checkTimeout) {
                clearTimeout(checkTimeout);
            }
        };
    }, [checkTimeout]);

    return (
        <div className="bg-white shadow-md rounded-2xl p-6 m-9 w-full max-w-xl">
            <div className="flex items-center mb-4">
                <span className="h-3 w-3 bg-blue-600 rounded-full mr-2"></span>
                <h2 className="text-lg font-semibold text-gray-900">Customer Information</h2>

                {/* üì± –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä Telegram –∑–∞–∫–∞–∑–∞ */}
                {isWorkingOnTelegramOrder && currentTelegramOrder && (
                    <div className="ml-auto">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            üì± From Telegram
                        </span>
                    </div>
                )}
            </div>

            <div className="space-y-4">
                {/* üìû –¢–µ–ª–µ—Ñ–æ–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π */}
                <div className="relative" ref={duplicatesRef}>
                    <input
                        type="text"
                        placeholder="Phone number"
                        value={formData.phoneNumber}
                        onChange={(e) => handlePhoneChange(e.target.value)}
                        name="phone_fake"
                        autoComplete="off"
                        className={`w-full px-4 py-3 rounded-xl border border-gray-200 focus:outline-none transition focus:ring duration-300 ease-in-out focus:ring-blue-400 ${
                            formData.phoneNumber
                                ? 'bg-white text-gray-900'
                                : 'bg-gray-50 text-gray-500'
                        } ${
                            isWorkingOnTelegramOrder && formData.phoneNumber
                                ? 'bg-blue-50 border-blue-200'
                                : ''
                        } ${
                            duplicateOrders.length > 0 ? 'border-orange-300 bg-orange-50' : ''
                        }`}
                        disabled={isWorkingOnTelegramOrder}
                    />

                    {/* üîÑ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
                    {isCheckingDuplicates && (
                        <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                        </div>
                    )}

                    {/* ‚ö†Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥—É–±–ª–µ–π */}
                    {!isCheckingDuplicates && duplicateOrders.length > 0 && (
                        <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                            <span className="text-orange-500 text-sm">‚ö†Ô∏è</span>
                        </div>
                    )}

                    {/* ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –¥—É–±–ª–µ–π) */}
                    {!isCheckingDuplicates && formData.phoneNumber && duplicateOrders.length === 0 && (
                        <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                            <span className="text-green-500">‚úì</span>
                        </div>
                    )}

                    {/* üì± Telegram –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
                    {isWorkingOnTelegramOrder && formData.phoneNumber && (
                        <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                            <span className="text-blue-500 text-sm">üì±</span>
                        </div>
                    )}

                    {/* üìã –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥—É–±–ª–µ–π */}
                    {showDuplicates && duplicateOrders.length > 0 && (
                        <div className="absolute z-50 w-full mt-1 bg-white border border-orange-200 rounded-xl shadow-lg max-h-80 overflow-y-auto">
                            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                            <div className="px-4 py-3 bg-orange-50 border-b border-orange-200">
                                <div className="flex items-center gap-2">
                                    <span className="text-orange-600">‚ö†Ô∏è</span>
                                    <span className="text-sm font-medium text-orange-800">
                                        –ù–∞–π–¥–µ–Ω–æ {duplicateOrders.length} –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
                                    </span>
                                </div>
                                <div className="text-xs text-orange-600 mt-1">
                                    –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                                </div>
                            </div>

                            {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
                            <div className="max-h-60 overflow-y-auto">
                                {duplicateOrders.map((order, index) => (
                                    <div
                                        key={order.order_id || index}
                                        onClick={() => handleSelectDuplicate(order.order_id)}
                                        className="px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors"
                                    >
                                        <div className="flex items-start justify-between">
                                            <div className="flex-1 min-w-0">
                                                <div className="flex items-center gap-2 mb-1">
                                                    <span className="text-sm font-medium text-gray-900">
                                                        ID: {order.order_id}
                                                    </span>
                                                    <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                                                        order.text_status === '–ó–∞–≤–µ—Ä—à–µ–Ω'
                                                            ? 'bg-green-100 text-green-800'
                                                            : order.text_status === '–û—Ç–º–µ–Ω–µ–Ω'
                                                                ? 'bg-red-100 text-red-800'
                                                                : 'bg-blue-100 text-blue-800'
                                                    }`}>
                                                        {order.text_status || '–û—Ñ–æ—Ä–º–ª–µ–Ω'}
                                                    </span>
                                                </div>
                                                <div className="text-sm text-gray-700 mb-1">
                                                    üë§ {order.leadName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
                                                </div>
                                                {order.address && (
                                                    <div className="text-xs text-gray-500 truncate">
                                                        üìç {order.address}
                                                    </div>
                                                )}
                                                {order.date && (
                                                    <div className="text-xs text-gray-500">
                                                        üìÖ {order.date}
                                                    </div>
                                                )}
                                            </div>
                                            <div className="text-right ml-3">
                                                {order.total && (
                                                    <div className="text-sm font-medium text-gray-900">
                                                        ${order.total}
                                                    </div>
                                                )}
                                                <div className="text-xs text-gray-500">
                                                    Client #{String(order.client_id || '').padStart(5, '0')}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>

                            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
                            <div className="px-4 py-3 bg-gray-50 border-t border-gray-200">
                                <button
                                    onClick={() => setShowDuplicates(false)}
                                    className="w-full text-sm text-gray-600 hover:text-gray-800 transition-colors"
                                >
                                    –ó–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫
                                </button>
                            </div>
                        </div>
                    )}
                </div>

                {/* üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ */}
                <div className="relative">
                    <input
                        type="text"
                        placeholder="Customer Name"
                        value={formData.customerName}
                        onChange={(e) => updateFormData('customerName', e.target.value)}
                        autoComplete="off"
                        className={`w-full px-4 py-3 rounded-xl border border-gray-200 focus:outline-none transition focus:ring duration-300 ease-in-out focus:ring-blue-400 ${
                            formData.customerName
                                ? 'bg-white text-gray-900'
                                : 'bg-gray-50 text-gray-500'
                        } ${
                            isWorkingOnTelegramOrder && formData.customerName
                                ? 'bg-blue-50 border-blue-200'
                                : ''
                        }`}
                        disabled={isWorkingOnTelegramOrder}
                    />

                    {/* ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ */}
                    {formData.customerName && (
                        <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                            <span className="text-green-500">‚úì</span>
                        </div>
                    )}

                    {/* üì± Telegram –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
                    {isWorkingOnTelegramOrder && formData.customerName && (
                        <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                            <span className="text-blue-500 text-sm">üì±</span>
                        </div>
                    )}
                </div>

                {/* üè† –ê–¥—Ä–µ—Å - –í–°–ï–ì–î–ê —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π */}
                <div className="relative">
                    <input
                        type="text"
                        placeholder="Address, ZIP code"
                        value={formData.address}
                        onChange={(e) => updateFormData('address', e.target.value)}
                        autoComplete="off"
                        className={`w-full px-4 py-3 rounded-xl border border-gray-200 focus:outline-none transition focus:ring duration-300 ease-in-out focus:ring-blue-400 ${
                            formData.address
                                ? 'bg-white text-gray-900'
                                : 'bg-gray-50 text-gray-500'
                        }`}
                    />

                    {/* ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ */}
                    {formData.address && (
                        <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                            <span className="text-green-500">‚úì</span>
                        </div>
                    )}
                </div>
            </div>

            {/* üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Telegram */}
            {isWorkingOnTelegramOrder && currentTelegramOrder && (
                <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-xl">
                    <div className="flex items-center mb-2">
                        <span className="text-blue-600 text-sm font-medium">üì± Original Telegram Message:</span>
                    </div>
                    <div className="text-sm text-blue-800 bg-white p-3 rounded-lg border border-blue-200">
                        {currentTelegramOrder.customerMessage}
                    </div>
                    <div className="text-xs text-blue-600 mt-2">
                        Accepted at: {new Date(currentTelegramOrder.acceptedAt).toLocaleString()}
                    </div>
                </div>
            )}

            {/* üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è */}
            <div className="mt-6">
                <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
                    <span>Progress</span>
                    <span>
                        {[
                            formData.phoneNumber,
                            formData.customerName,
                            formData.address
                        ].filter(Boolean).length}/3 completed
                    </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                        style={{
                            width: `${([
                                formData.phoneNumber,
                                formData.customerName,
                                formData.address
                            ].filter(Boolean).length / 3) * 100}%`
                        }}
                    ></div>
                </div>
            </div>
        </div>
    );
}